#/usr/bin/python2
"""
Builds a binary file and outputs a data file from a subdirectory
SYNOPSIS : datafile.py <dirname, default=data> -> creates a <dirname>.bin + writes .h on stdout.
lz4 files are exported without extension to allow transparent compression

"""

import sys,os,re
dirname=sys.argv[1] if len(sys.argv)>=2 else 'data'

file_data = open(dirname+'.bin','wb')

def quote(s) : 
	s = s.rsplit('.lz4',1)[0] # remove .lz4 if needed to allow transparent referencing 
	return re.sub(r'(^[^a-zA-Z])|[^0-9a-zA-Z_]','_',s)

print '/* %s.h generated by %s from packing directory %s. \n define DATA_IMPLEMENTATION in one .c file */'%(dirname, sys.argv[0], dirname)
quotdir = quote(dirname)

print "\nenum %s_file_id {"%quotdir

# start with empty file at position 0x0 
dirlist=[(0,'empty slot')] 
print  '    %s__empty__, // 0=empty slot \n'%(quotdir,)

for fn in sorted(os.listdir(dirname)) :
	f=quote(fn)
	dirlist.append((file_data.tell(),f))
	print  '    %s_%s, // %s'%(quotdir,f,fn)
	file_data.write(open(dirname+'/'+fn,'rb').read())
print  '\n    %s_%s'%(quotdir,'NBFILES')
	
dirlist.append((file_data.tell(),' * EOF *'))
print "};"

print "extern const int %s_offsets[];"%quotdir
print "extern const char data_bin[];"

print "\n#ifdef DATA_IMPLEMENTATION"
print  "const int %s_offsets[] = { "%quotdir
for n,f in dirlist : 
	print  '    %5d, // %s'%(n,f)	
print "};\n#endif"
